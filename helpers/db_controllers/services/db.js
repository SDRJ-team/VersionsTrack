const assert = require("assert");
const mongoose = require("mongoose");
const timestamps = require('mongoose-timestamp'); // TODO: consider using this for last update time data.
let versions_model;
let is_initialize = false;

let init_versions_schema = _ => {
    // Define versions schema
    let schema = mongoose.Schema({
        version: {
            type: String,
            required: true
        },
        prev_version: {
            type: String,
            required: true
        },
        details: String,
        downloader: String,
        release_date: {
            type: Date,
            default: Date.now
        },
        known_issues: String,
        properties: [
            {
                // _id is automatically generated by mongodb
                type: {
                    type: String,
                    enum: ['Feature', 'Fix Bug', 'Change', 'Deprecated'],
                    default: 'Feature',
                    required: true
                },
                description: {
                    type: String,
                    required: true
                },
                tests_scope: {
                    type: String,
                    enum: ['None', 'Partial', 'Large', 'Full'],
                    default: 'Partial',
                    required: true
                },
                tests_details: String,
                known_issues: String
            }
        ]
    });

    // Text search indexes
    schema.index({
        details: 'text',
        downloader: 'text',
        known_issues: 'text',
        "properties.type": 'text',
        "properties.description": 'text',
        "properties.known_issues": 'text'
    }, {
        weights: {
            details: 1,
            downloader: 1,
            known_issues: 1,
            "properties.type": 1,
            "properties.description": 1,
            "properties.known_issues": 1
        }
    });

    // Create versions model
    versions_model = mongoose.model('versions', schema);

    // Make sure the text search indexes are ready
    versions_model.on('index', error => { if (error) console.log(error) });
};

let initDB = callback => {
    assert.ok(!is_initialize, "A try to initialize an initialized DB detected.");
    mongoose.connect('mongodb://localhost/resthub', {
        useNewUrlParser: true,
        useCreateIndex: true,
        useUnifiedTopology: true
    });

    console.log("Db connected successfully");

    init_versions_schema();

    is_initialize = true;
    callback();
};

let db_use_pre_conditions = _ => {
    assert.ok(is_initialize, "Db has not been initialized. Please called init first.");
};

let getVersionsDBModel = _ => {
    db_use_pre_conditions();
    return versions_model;
};

module.exports = {
    getDB: _ => {
        return {
            versions_model: getVersionsDBModel
        }
    },
    initDB
};